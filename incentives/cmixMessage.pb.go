// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cmixMessage.proto

package incentives

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CMIXText struct {
	Version              uint32     `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Text                 string     `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Reply                *TextReply `protobuf:"bytes,3,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CMIXText) Reset()         { *m = CMIXText{} }
func (m *CMIXText) String() string { return proto.CompactTextString(m) }
func (*CMIXText) ProtoMessage()    {}
func (*CMIXText) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8772309f0765949, []int{0}
}

func (m *CMIXText) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMIXText.Unmarshal(m, b)
}
func (m *CMIXText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMIXText.Marshal(b, m, deterministic)
}
func (m *CMIXText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMIXText.Merge(m, src)
}
func (m *CMIXText) XXX_Size() int {
	return xxx_messageInfo_CMIXText.Size(m)
}
func (m *CMIXText) XXX_DiscardUnknown() {
	xxx_messageInfo_CMIXText.DiscardUnknown(m)
}

var xxx_messageInfo_CMIXText proto.InternalMessageInfo

func (m *CMIXText) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CMIXText) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CMIXText) GetReply() *TextReply {
	if m != nil {
		return m.Reply
	}
	return nil
}

type TextReply struct {
	MessageId            []byte   `protobuf:"bytes,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	SenderId             []byte   `protobuf:"bytes,2,opt,name=senderId,proto3" json:"senderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextReply) Reset()         { *m = TextReply{} }
func (m *TextReply) String() string { return proto.CompactTextString(m) }
func (*TextReply) ProtoMessage()    {}
func (*TextReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8772309f0765949, []int{1}
}

func (m *TextReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TextReply.Unmarshal(m, b)
}
func (m *TextReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TextReply.Marshal(b, m, deterministic)
}
func (m *TextReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextReply.Merge(m, src)
}
func (m *TextReply) XXX_Size() int {
	return xxx_messageInfo_TextReply.Size(m)
}
func (m *TextReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TextReply.DiscardUnknown(m)
}

var xxx_messageInfo_TextReply proto.InternalMessageInfo

func (m *TextReply) GetMessageId() []byte {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *TextReply) GetSenderId() []byte {
	if m != nil {
		return m.SenderId
	}
	return nil
}

func init() {
	proto.RegisterType((*CMIXText)(nil), "incentives.CMIXText")
	proto.RegisterType((*TextReply)(nil), "incentives.TextReply")
}

func init() {
	proto.RegisterFile("cmixMessage.proto", fileDescriptor_e8772309f0765949)
}

var fileDescriptor_e8772309f0765949 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xce, 0xcd, 0xac,
	0xf0, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xca,
	0xcc, 0x4b, 0x4e, 0xcd, 0x2b, 0xc9, 0x2c, 0x4b, 0x2d, 0x56, 0x4a, 0xe5, 0xe2, 0x70, 0xf6, 0xf5,
	0x8c, 0x08, 0x49, 0xad, 0x28, 0x11, 0x92, 0xe0, 0x62, 0x2f, 0x4b, 0x2d, 0x2a, 0xce, 0xcc, 0xcf,
	0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x82, 0x71, 0x85, 0x84, 0xb8, 0x58, 0x4a, 0x52, 0x2b,
	0x4a, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x6d, 0x2e, 0xd6, 0xa2, 0xd4,
	0x82, 0x9c, 0x4a, 0x09, 0x66, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x51, 0x3d, 0x84, 0xa9, 0x7a, 0x20,
	0xe3, 0x82, 0x40, 0x92, 0x41, 0x10, 0x35, 0x4a, 0xae, 0x5c, 0x9c, 0x70, 0x31, 0x21, 0x19, 0x2e,
	0xce, 0x5c, 0x88, 0x83, 0x3c, 0x53, 0xc0, 0x36, 0xf1, 0x04, 0x21, 0x04, 0x84, 0xa4, 0xb8, 0x38,
	0x8a, 0x53, 0xf3, 0x52, 0x52, 0x8b, 0x3c, 0x53, 0xc0, 0xf6, 0xf1, 0x04, 0xc1, 0xf9, 0x4e, 0x5a,
	0x51, 0x1a, 0xe9, 0x99, 0x25, 0x39, 0x89, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xa9, 0x39, 0x99,
	0x15, 0x15, 0x99, 0x45, 0xfa, 0x08, 0x8b, 0x91, 0x98, 0x49, 0x6c, 0x60, 0xcf, 0x1a, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x4a, 0x41, 0x51, 0x93, 0x01, 0x01, 0x00, 0x00,
}
